#include <ros.h>
#include <geometry_msgs/Twist.h>
#include <std_msgs/Int32.h>

ros::NodeHandle  nh; 
std_msgs::Int32 str_msg;
geometry_msgs::Twist cmd_vel; 

int velocity = 0;
int steer_angle = 0;

void cmd_vel_callback(const geometry_msgs::Twist& msg)
{
  velocity = (int)msg.linear.x;       // 속도제어
  steer_angle = (int)msg.angular.z;   // steering motor 각도 제어

  if(velocity >= 255) velocity  = 255;  // pwm 최고값 제한(전진속도)
  if(velocity <=-255) velocity = -255;  // pwm 최저값 제한(후진속도)

}

ros::Subscriber<geometry_msgs::Twist> teleop_cmd_sub("teleop_cmd_vel", cmd_vel_callback);
ros::Publisher cmd_pub("cmd_vel2", &cmd_vel);

// Front Motor Drive
#define MOTOR1_PWM 2
#define MOTOR1_DIR 3
#define MOTOR1_Brake 4

#define MOTOR2_PWM 5
#define MOTOR2_DIR 6
#define MOTOR2_Brake 7

#define MOTOR3_PWM 8
#define MOTOR3_DIR 9
#define MOTOR3_Brake 10

void first_Step(int velocity_1) // @@ forward @@
{
  digitalWrite(MOTOR1_DIR, HIGH);
  digitalWrite(MOTOR2_DIR, HIGH);
  analogWrite(MOTOR1_PWM, velocity_1);
  analogWrite(MOTOR2_PWM, velocity_1);  
}

void second_Step(int velocity_2) // @@ turn left @@
{
  digitalWrite(MOTOR1_DIR, HIGH);
  digitalWrite(MOTOR2_DIR, HIGH);
  digitalWrite(MOTOR3_DIR, HIGH); // @@ maybe turning left @@

  analogWrite(MOTOR1_PWM, velocity_2-5);
  analogWrite(MOTOR2_PWM, velocity_2);
  analogWrite(MOTOR3_PWM, velocity_2); // @@ velocity of handle @@
}

void third_Step(int velocity_3) // @@ turn right @@
{
  digitalWrite(MOTOR1_DIR, HIGH);
  digitalWrite(MOTOR2_DIR, HIGH);
  digitalWrite(MOTOR3_DIR, LOW); // @@ maybe turning right @@

  analogWrite(MOTOR1_PWM, velocity_3-5);
  analogWrite(MOTOR2_PWM, velocity_3);
  analogWrite(MOTOR3_PWM, velocity_3); // @@ velocity of handle @@
}

void fourth_Step(int velocity_4) // @@ Brake @@
{
  digitalWrite(MOTOR1_Brake, HIGH);
  digitalWrite(MOTOR2_Brake, HIGH);
  digitalWrite(MOTOR3_Brake, HIGH);

  analogWrite(MOTOR1_PWM, velocity_4);
  analogWrite(MOTOR2_PWM, velocity_4);
  analogWrite(MOTOR3_PWM, velocity_4);
}


void motor_control()
{
  velocity=30;

  first_Step(velocity);

  velocity=23;
  delay(2000);

  velocity=15;
  second_Step(velocity);
  delay(2000);
  third_Step(velocity);

  velocity=5;

  velocity=0;
  fourth_Step(velocity);
}

void setup() 
{
  // put your setup code here, to run once:
  Serial.begin(57600);

  // Front Motor
  pinMode(MOTOR1_PWM, OUTPUT);
  pinMode(MOTOR1_DIR, OUTPUT);  
  pinMode(MOTOR1_Brake, OUTPUT);

  // Rear Motor 
  pinMode(MOTOR2_PWM, OUTPUT);
  pinMode(MOTOR2_DIR, OUTPUT);  
  pinMode(MOTOR2_Brake, OUTPUT);

  //steer motor
  pinMode(MOTOR3_PWM, OUTPUT);
  pinMode(MOTOR3_DIR, OUTPUT); 
  pinMode(MOTOR3_Brake, OUTPUT); 

  nh.initNode(); 
  nh.subscribe(teleop_cmd_sub); 
  nh.advertise(cmd_pub);
}

void loop() 
{
  digitalWrite(MOTOR1_Brake, LOW);
  digitalWrite(MOTOR2_Brake, LOW);
  digitalWrite(MOTOR3_Brake, LOW);

  motor_control();

  cmd_vel.linear.x = velocity;
  cmd_vel.angular.z = steer_angle;
  cmd_pub.publish(&cmd_vel);

  nh.spinOnce();
}
